{"4J5KX7":"aHR0cHM6Ly9uZXhhaWVyLmdpdGh1Yi5pby9hdXRoLWFjY291bnQv","F4Q5TW":"aHR0cHM6Ly9uZXhhaWVyLmdpdGh1Yi5pby9naXRodWItdXNlcnMtcHJvZmlsZS8=","IICVSY":"","2N6213":"<!DOCTYPE html><html><head><style type=\\\"text\/css\\\">* { margin:0; padding:0; } html, body { width:100%; height:100%; overflow: hidden; background:black;} canvas { display:block; }#controls {  z-index: 2;  margin: 20px;  position: absolute;  top: 0; left: 0;  color: white;}<\/style><\/head><body><div id=\\\"controls\\\"><\/div><script src=\\\"https:\/\/cdnjs.cloudflare.com\/ajax\/libs\/p5.js\/0.10.2\/p5.min.js\\\"><\/script><script type=\\\"text\/javascript\\\">let maxTicks = 750;let speed = 40;let ticks = 0;class Point{  constructor(x, y, c){    this.pos = createVector(x, y);    this.c = c;    let a = random(TAU);    this.vel = createVector(cos(a), sin(a));    this.hue = random();  }  update(){    this.pos.x += this.vel.x;    this.pos.y += this.vel.y;    let d = this.pos.dist(this.c.pos);    if (d > this.c.r){      let n = this.c.pos.copy().sub(this.pos).normalize();      this.vel = this.vel.copy().sub(n.mult(n.dot(this.vel)*2));    }  }  render(){    stroke(this.hue, 1, 1, .01);    point(this.pos.x, this.pos.y);    let d = this.c.distTo(this.pos.x, this.pos.y);    ellipse(this.pos.x, this.pos.y, d*2);  }}class Circle{  constructor(x, y, r){    this.pos = createVector(x, y);    this.r = r;  }  rPoint(){    let a = random(TAU);    let d = random(this.r);    return new Point(this.pos.x + cos(a)*d, this.pos.y + sin(a)*d, this);  }  distTo(x, y){    let d = Math.hypot(this.pos.x-x, this.pos.y-y);    if (d < this.r) return this.r-d;    return d-this.r;  }}function setup (){  pixelDensity(1);  createCanvas();  colorMode(HSB, 1, 1, 1);  windowResized();}let points, hue, s;let init = () => {  s = min(width, height)\/659;  ticks = 0;  hue = random();  let c = new Circle(width\/2, height\/2, min(width, height)*.45);  points = [];  for (let i = 0; i < 3; i++){    points.push(c.rPoint());  }  blendMode(BLEND);  background(0);  console.log(height);}function draw(){  blendMode(ADD);  noFill();    if (ticks < maxTicks*s){    for (let i = 0; i < speed; i++){      beginShape();      for (let p of points){        p.update();        p.render();        vertex(p.pos.x, p.pos.y);      }      stroke(hue, 1, 1, .01);      endShape(CLOSE);      ticks++;    }  }}function mousePressed(){  init();}function windowResized(){  resizeCanvas(windowWidth, windowHeight);  init();}<\/script><\/body><\/html>"}